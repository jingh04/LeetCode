#Say you have an array prices for which the ith element is the price of a given stock on day i.
#Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).
#Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

#Solution 1: my submission
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        day = len(prices)
        if day == 1:
            return 0
        else:
            profit = 0
            buy = 0
            hold = False
            for i in range(0,day-1):
                if hold == False and prices[i] < prices[i+1]:
                    buy = prices[i]
                    hold = True
                if hold == True and prices[i] > prices[i+1]:
                    profit += prices[i] - buy
                    hold = False
            if hold == True and prices[day-1] > buy:
                profit += prices[day-1] - buy
            return profit

#Solution 2: easier solution
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) == 1: # edge case
            return 0
        
        # take down positive daily return only
        profit = [] 
        for i in range(1, len(prices)):
            profit.append(max(0, prices[i] - prices[i-1])) 
        return sum(profit)
                
