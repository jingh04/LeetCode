#Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.
#The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.
#You may assume the integer does not contain any leading zero, except the number 0 itself.

#Solution 1: my submission
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        number = 0
        N = len(digits)
        for i, ele in enumerate(digits):
            number += ele * pow(10,N-i-1)
        number += 1
        ans = []
        N2 = N
        if number // pow(10,N) == 1:
            N2 += 1
        for i in range(N2):
            ans.append(number // pow(10,N2-i-1))
            number = number % pow(10,N2-i-1) 
        return ans
        
#Solution 2: similar with Solution 1, but use str so easier
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        num_s = ''.join(str(x) for x in digits)
        nums = str(int(num_s) + 1)
        r = [int(x) for x in nums]
        return [0] * (len(digits) - len(r)) + r

#Solution 3: direct method
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        for i in range(len(digits),0,-1):
            if digits[i-1] == 9:
                digits[i-1] = 0
                if i == 1:
                    digits = [1] + digits
            else:
                digits[i-1] += 1
                break
        return digits
        
