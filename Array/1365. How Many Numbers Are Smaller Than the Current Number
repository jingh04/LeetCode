#Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].
#Return the answer in an array.

#Solution 1: time O(n2)
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        res = [0] * len(nums)
        for i in range(len(nums)):
            for j in range(len(nums)):
                if nums[j] < nums[i]:
                    res[i] += 1
        return res
        
#Solution 2: time O(n log n) 
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
	    temp = sorted(nums)
	    mapping = {}
	    result = []
	    for i in range(len(temp)):
		    if temp[i] not in mapping:
			    mapping[temp[i]] = i
	    for i in range(len(nums)):
		    result.append(mapping[nums[i]])
	    return result

#Solution 3: shorter
def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
	dic = {}
	sorted_list = sorted(nums)

	for i,n in enumerate(sorted_list):
		if n not in dic:
			dic[n] = i
	return [dic[n] for n in nums]
